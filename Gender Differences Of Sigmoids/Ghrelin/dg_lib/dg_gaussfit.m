function [a, mu, width] = dg_gaussfit(x, y, idxrange)
%[a, mu, width] = dg_gaussfit(x, y, idxrange)
% Uses the Matlab curve fitter to fit the range <idxrange> of
% y-as-a-function-of-x with the function:
%	Y = a * exp(-((x-mu)/width).^2)
% with no constraints on the values of a, mu, width except that <a>
% cannot be negative and <width> must be at least median(diff(x)).
% Iteration stops when there is less than 1 part in 1e6 change in Y, but it
% remains mysterious as to how the step size is adjusted, and whether the
% 1e-6 change refers to individual points, or the sum over points, or the
% average.
%NOTES
% <width> is NOT the same thing as <sigma> in the Matlab function
% 'normpdf'.  The relationship between the two is:
%   sigma = width / sqrt(2)

%$Rev: 219 $
%$Date: 2015-05-03 15:39:39 -0400 (Sun, 03 May 2015) $
%$Author: dgibson $

xoffset = min(x(idxrange));
xscale = max(x(idxrange)) - min(x(idxrange));
yscale = max(y(idxrange));
x2 = reshape((x(idxrange) - xoffset) / xscale, [], 1);
dx = median(diff(x));
y2 = reshape(y(idxrange) / yscale, [], 1);
[fobj,gof,output] = fit( x2, y2, 'gauss1', ...
    fitoptions( ...
    'Normalize', 'off', ...
    'Exclude', [], ...
    'Weights', [], ...
    'Method', 'NonlinearLeastSquares', ...
    'Robust', 'Bisquare', ...
    'StartPoint', [], ...
    'Lower', [0 -Inf dx], ...
    'Upper', [], ...
    'Algorithm', 'Trust-Region', ...
    'DiffMinChange', 1e-08, ...
    'DiffMaxChange', 0.1, ...
    'Display', 'Notify', ...
    'MaxFunEvals', 600, ...
    'MaxIter', 400, ...
    'TolFun', 1e-06, ...
    'TolX', 1e-06) );
c = coeffvalues(fobj);
a = yscale * c(1);
mu = xscale * c(2) + xoffset;
width = xscale * c(3); % this is NOT 'sigma'!


